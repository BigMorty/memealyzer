@page "/"
@inject ApiServiceClient ApiServiceClient;
@inject FunctionsServiceClient FunctionsServiceClient;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IDisposable

<h1>Memealyzer</h1>

<EditForm OnValidSubmit="HandleFormSubmit" Model="@image">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="url" @bind-Value="image.Url" size="100"/>

    <button type="submit" value="submit" @onclick="@(()=> image.Type = ImageType.New)" disabled="@(!IsConnected)">Submit</button>
    <button type="submit" value="random" @onclick="@(()=> image.Type = ImageType.Meme)" disabled="@(!IsConnected)">Add Random Meme</button>
    <label>@image.Status</label>
</EditForm>

@if (images == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="row text-center text-lg-left">
            @foreach (var image in images)
            {
                <div class="col-md-4">
                   <div class="card" style="width: 100%;">
                        <img class="card-img-top border border-8 border-@image.Color img-thumbnail" style="border-style: @borderStyle !important" src="@image.BlobUri" alt="">
                        <div class="card-body">
                            <p class="card-text">@image.Text</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}


@code {
    private List<Image> images;
    private Image image = new Image();
    private HubConnection hubConnection;
    private string borderStyle;

    protected override async Task OnInitializedAsync()
    {
        borderStyle = await ApiServiceClient.GetBorderStyle();
        images = await ApiServiceClient.GetImages();

        hubConnection = FunctionsServiceClient.GetHubConnection();

        hubConnection.On<Image>("ReceiveImage", (image) =>
        {
            int index = images.FindIndex(0, 1, f => f.Id == image.Id);
            if (index >= 0)
            {
                images[index] = image;
            }
            else
            {
                images.Insert(0, image);
            }

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }


    private async Task HandleFormSubmit()
    {
        image.Status = "Uploading...";

        var postedImage = await ApiServiceClient.PostImage(image.Type, image.Url);

        images.Insert(0, postedImage);

        StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection != null && hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
